#+TITLE: Introduction to the Emacs text editor
#+PROPERTY: header-args :tangle init.el :noweb yes
#+AUTHOR: Jeffrey Fisher; Skylar
#+beamer_theme: metropolis

# Top level headings will be sections, 2nd level headings will be slides.
#+OPTIONS: H:2

# Make code block font size smaller.
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks,urlcolor=blue,linkcolor=blue}

* TODO
Before publishing this document, search for the keyword TODO, and make
sure nothing shows up.

** TODO Window management commands
The defaults are not very mneumonic.

Jeff: I need to look at windmove.

** TODO What basics do we need to cover?
Do we even need to cover "arrow keys move in the text"? I guess we could mention it.

Jeff: As a short introduction at a hackathon I feel we should
introduce interesting features instead of the basics. The basics of
movement are best learned with sustained practice, and Emacs has a
good tutorial for that already. Plus common shortcuts actually seem to
be default, like Control plus arrow keys for movement by word.

** TODO What to do for unfamiliar notation/terms?
At least two options:
1. Cover them upfront.
   - Pro: Helpful for using Emacs themselves.
2. Use familiar terminology, and mention that there is a glossary that
   they can look at. Put the glossary in the Git repository or in the
   slideshow.

Jeff: Temporarily I am leaning towards covering them upfront. Will
wait for feedback from Skylar. Also will see how much time it uses and
confusion it creates.

** TODO Display line numbers by default, or at least mention how to in the config.

** TODO Notation/terms glossary
- Emacs keyboard shortcut notation

** TODO Goal: Reasonable language-specific setups
We can't achieve perfect language-specific setups because it will
depend on personal preference and there are a lot of languages.

Jeff: Currently I am not using that many popular languages. My
personal config doesn't have much language-specific config to pull
from. All I can do is recommend modes for syntax-highlighting and
Tuareg mode for OCaml.

Jeff: If eglot LSP is reasonably easy to setup, then that'd be great.
However I don't think installing the actual langauge servers easily is
a solved problem. I haven't used LSP though so I don't actually know.

** TODO Goal: Configuration results in an Emacs usable at a Notepad++ level
Should paper over main annoyances that new users face.

cua-mode does a lot here.

** TODO Spellcheck this document.

** TODO Should we enable pixel-scroll-mode in the config?
* Meta rules for this document :noexport:
** Emacs Lisp
*** Avoid using quote where possible.
hello o not use quote for lists, use =(list)= instead if possible. =(list)=
is hopefully more readable and approachable for people new to Lisp,
which the majority of our audience likely will be.
** Famliarity
*** Use popular notation for keyboard shortcuts.
# TODO: Jeff: I'm unsure about this. We could introduce it at the
# start, then use Emacs notation throughout the presentation.
# I'm not sure which option is better.
Can mention Emacs notation (=C-x=), but should use a popular notation
throughout the presentation (=Ctrl-x=).

* What is Emacs?
** What is Emacs?
Emacs is:

- a text editor
- customizable
  - There are many settings available without writing actual code, and
    small changes require little code.
- infinitely extensible
  - Thousands of plugins/extensions ("packages").
  - Emacs is configured with a full programming language, can easily
    add your own functions.

Emacs has a long history, but nowadays the most widely used version is
GNU Emacs.

** Dispelling the CMSC216 myth
If you attend the University of Maryland and take CMSC216, you will use Emacs.

But, it will be running on a (somewhat slow) shared server in a
remote-desktop-like scenario.

Running graphical programs over a network is slow and unresponsive.
Emacs is comfortably fast when it is running on your computer.

Also the version of Emacs installed on those servers is old.

** About this presentation
Emacs is infinitely customizable. We can only cover a very small part
of that infinity, and that part is biased by our experiences.

At the end of the day this presentation is really about how we use
Emacs and how we think you /might/ use Emacs.

** What to expect from this presentation
- Hopefully, with the base config and knowledge from this presentation
  you can comfortably use Emacs at a basic level to edit code and
  other text.
- Learn how to get help from Emacs and external sources.
- Basic knowledge of a few advanced Emacs features.
- Awareness of interesting options to dive deeper, if you wish to do so.

* Basic Emacs usage
** First things first
=C-g= key command quits the current action.

- Make a mistake while typing a key command? =C-g= will quit the partially entered command.
- Run a command that takes a while and want to stop it? =C-g=
- Is there a prompt open that you want to close? =C-g=

Note: =C-g= means =Control+g=, which means hold control/ctrl and press
'g'. We will use the shorter form because it is what Emacs uses, to
help you get accustomed to it.

** Mess around in a buffer
Create a new buffer.
1. =C-x b=
   - This means =Control+x b=, which means:
     1. Hold the Control/Ctrl key and press 'x'.
     2. Release the control key.
     3. Press 'b'.
2. At the bottom of your Emacs window there should be a prompt "Switch
   to buffer", with your cursor at the end so that you can type.
3. Type a name for the buffer, such as "new", then press enter.

You should now be in a blank buffer.

Notepad-level stuff works. Type stuff, backspace, arrow keys,
selecting text and moving with the mouse.

** Hold up
- Buffer = A place where text is stored that you can edit.
  - When you open a file it is loaded into a buffer. When you "save a
    file", the contents of the buffer are written to the file.

Emacs is definitely keyboard-focused, but it has pretty good mouse
support.

Learning new shortcuts is hard. The menu bar at the top of the screen
has many common commands, and will also tell you the keyboard
shortcut.

** Opening files
# TODO : Best way to explain this one? New programmers may not have
# worked with file paths yet, and I don't know if Emacs can or should
# open the system file dialog. Maybe could teach using Dired?

** Viewing multiple buffers at the same time

* Getting help
* Beginning our configuration
** Emacs Lisp code
#+begin_src elisp :tangle no
<<initialize-package-manager>>
#+end_src

- semicolon (=;=) = Comment that continues until the end of the line.
- ='package= = A "symbol". Human-readable constant. Can think of it
  like an enum value.

** Emacs Lisp code
# TODO : This whole "Emacs Lisp code" section may be too long. We can
# certainly breeze through it during the actual presentation and keep
# it in the slides for reference, but it still may be overboard for
# the purpose of this workshop.

#+begin_src elisp :tangle no
<<initialize-package-manager>>
#+end_src

Translated to familiar syntax:

#+begin_src text :tangle no
  import package

  # Initialize package manager
  package.archives = [["melpa", "https://melpa.org/packages/"],
                      ["elpa", "https://elpa.gnu.org/packages/"]]
  package.initialize()
  if (not package.archive_contents) {
     package.refresh_contents()
  }
#+end_src

** Emacs Lisp code
In a C-like language:

#+begin_src elisp :tangle no
sqrt(1 + 2 + 3)
#+end_src

In Emacs Lisp:

#+begin_src text :tangle no
(sqrt (+ 1 2 3))
#+end_src

- Move the function name inside the parentheses.
- All operators (like =+=) are called using function syntax, so the
  plus goes at the start (prefix) instead of in the middle (infix).

** Setup the package manager
Emacs has *many* features built-in, but we will want some third-party packages.
Here, "packages" just means additional code for Emacs.

You can generally think of them like plugins/extensions.

#+name:initialize-package-manager
#+begin_src elisp
  ;; Initialize package manager
  (require 'package)
  <<package-archives>>
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Non-tangled :noexport:
:PROPERTIES:
:header-args: :tangle no
:END:

#+name: package-archives
#+begin_src elisp
  (setq package-archives
        (list ("melpa" . "https://melpa.org/packages/")
              ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Package archives
The =package-archives= variable specifies where to download packages from.

- MELPA = Widely used third-party package repository.
- ELPA = Emacs Lisp Package Archive. This is the official Emacs
  package archive.

#+begin_src elisp :tangle no
  <<package-archives>>
#+end_src

** use-package
We will be using =use-package=, a tool for declaratively specifying
package configuration.

#+begin_src elisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  ;; Download and install configured packages if they aren't already installed.
  (setq use-package-always-ensure t)
#+end_src

** Pretty colors
# TODO : Not sure if mentioning color schemes in the actual
# presentation is a good idea. Maybe could only take 10 seconds, then
# people can play with the options while we move on?

# TODO : ef-themes seem to conflict with modus themes, at least for
# display-line-numebers mode line numbers column. and some other text
# highlighting aspects.
# Maybe need to run =M-x disable-theme= before changing themes?

# TODO : Test the initial theme loading prompting you if you want to
# trust the theme code. Should we make the base configuration trust
# all the ef-themes by default? Or just mention the minibuffer and
# that people should look there for prompts?

#+begin_src elisp
  (use-package ef-themes)
  ;; A nice dark theme. `'modus-operandi` is the light theme version.
  ;; You can change the theme with `M-x load-theme`.
  ;; You can pick from the ef-themes with `M-x ef-themes-select`.
  (load-theme 'modus-vivendi)
#+end_src

** Conveniences
Follow "Common User Access" conventions.

- =C-z= = Undo
- =C-x= = Cut
- =C-c= = Copy
- =C-v= = Paste

#+begin_src elisp
  (use-package cua-base
    :custom
    (cua-keep-region-after-copy t)
    :init
    (cua-mode))
#+end_src

* Advanced Emacs
** Advanced Emacs
In this section, keep in mind that this is optional.

There are many Emacs users out there who don't use any third-party
packages, don't do much customization, or don't use advanced text
editing features.

** Useful features

** Advanced text editing

* (optional) Adventures
** Adventures that await you, if you wish
# TODO : Do we want to mention Doom, Spacemacs, or any other pre-made
# configurations? If so, which subset of them do we want to mention?
#
# Jeff: Personally I have used Doom and found it to be pretty good, but
# now I prefer a smaller custom configuration I can more easily
# understand.
- TRAMP : Transparent Remote (file) Access, Multiple Protocol
  - Similar to VS Code's Remote SSH plugin.
- evil-mode: Emulates Vim keybindings.
- [[https://orgmode.org/][org-mode]]
  - "keeping notes, authoring documents, computational notebooks,
    literate programming, maintaining to-do lists, planning projects",
    spreadsheets
  - This slideshow and the sample configuration we provide you were
    both created from the same Org document.
- [[https://magit.vc/][Magit]], the magical Git interface
  - A high-quality interface for the Git version control system.

** If you love Emacs so much, why don't you marry it?
Here are just a few examples of things Emacs can do beyond editing text.

- Shells / terminals: =M-x shell=, =eshell=, =term=, =ansi=term=
  - [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Running Shells and Terminal Emulators in Emacs]]
- Email: [[https://www.gnus.org/][GNUS]], [[https://www.djcbsoftware.nl/code/mu/mu4e/index.html][mu4e]], and [[https://www.emacswiki.org/emacs/CategoryMail][more]]
- Instant messaging client for Slack, IRC, Matrix, etc.

* (extra) Plain fun
** Plain fun
- artist-mode lets you draw text-based art.
- =M-x strokes-help= : Control Emacs with mouse gestures.
- =M-x follow-mode= : Enable this and open multiple copies of a buffer
  side-by-side with =C-x 3= to read a buffer across multiple columns.

* (extra) Other resources
** Whet your appetite
- [[https://emacsrocks.com/][Emacs Rocks!]]: Series of short videos demonstrating cool and useful
  things you can do with Emacs.
- [[https://karthinks.com/software/batteries-included-with-emacs/][Batteries included with Emacs]] : Underrated built-in features.
  - [[https://karthinks.com/software/more-batteries-included-with-emacs/][More batteries included with Emacs]]

** Reference
- [[https://www.gnu.org/software/emacs/manual/index.html][GNU Emacs manuals]]
  - Also available inside of Emacs. =M-x info-emacs-manual= or =C-M-h r=
- [[https://www.emacswiki.org/][EmacsWiki]]

* (extra) Glossary
** Keyboard shortcut notation
=Ctrl+Alt+Shift+x=

When talking about keyboard shortcuts, Emacs would write the above as =C-M-S-x=.

'C' stands for control/ctrl.

'M' stands for "meta". For historical reasons Emacs talks about a
"meta" key. Nowadays this usually means "Alt".

'S' stands for shift.
