#+TITLE: Introduction to the Emacs text editor
#+PROPERTY: header-args :tangle init.el :noweb yes
#+AUTHOR: Skylar Chan; Jeffrey Fisher
#+beamer_theme: metropolis

# Top level headings will be sections, 2nd level headings will be slides.
#+OPTIONS: H:2

# Make code block font size smaller.
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks,urlcolor=blue,linkcolor=blue}

* TODO todo :noexport:
Before publishing this document, search for the keyword TODO, and make
sure nothing shows up.

** TODO Configure a file tree sidebar
Many people like it, popular in other code editors.

** TODO Window management commands
The defaults are not very mneumonic.

Jeff: I need to look at windmove.

Skylar: Alt+Arrow should do the job.

** DONE What basics do we need to cover?

Just to remind you, the basics should work as expected (because we configured them):

- Ctrl-z, Ctrl-x, Ctrl-c, Ctrl-v for undo/cut/copy/paste
- Ctrl-Arrows for moving forward/back words
- Right click for context menu

Some shortcuts are a little different (should we rebind these?):
- Select all = Ctrl-x + h
- Save file = Ctrl-x + s
- Open file = Ctrl-x + f
- Close file = Ctrl-x + k
- Save as = Ctrl-x + Ctrl+w
- Find = Ctrl-s

** DONE What to do for unfamiliar notation/terms?
At least two options:
1. Cover them upfront.
   - Pro: Helpful for using Emacs themselves.
2. Use familiar terminology, and mention that there is a glossary that
   they can look at. Put the glossary in the Git repository or in the
   slideshow.

Jeff: Temporarily I am leaning towards covering them upfront. Will
wait for feedback from Skylar. Also will see how much time it uses and
confusion it creates.

Skylar: Things like C-x and M-x being Ctrl-x and Alt-x are just notational changes. Things like "everything is a buffer" are a little more confusing.

** DONE Display line numbers by default, or at least mention how to in the config.
CLOSED: [2023-03-21 Tue 23:37]

** TODO Review the modeline

** TODO Notation/terms glossary
- Emacs keyboard shortcut notation

** TODO Goal: Reasonable language-specific setups
We can't achieve perfect language-specific setups because it will
depend on personal preference and there are a lot of languages.

Jeff: Currently I am not using that many popular languages. My
personal config doesn't have much language-specific config to pull
from. All I can do is recommend modes for syntax-highlighting and
Tuareg mode for OCaml.

Jeff: If eglot LSP is reasonably easy to setup, then that'd be great.
However I don't think installing the actual langauge servers easily is
a solved problem. I haven't used LSP though so I don't actually know.

Skylar: Emacs LSP is pretty finicky overall. Eglot is the easiest way to use it but integrating completions requires a lot of work. Would recommend people manually complete using dabbrev or hippie-expand or cape, instead of trying to write their own custom super-capf. If I can figure out how to do it before, then that would be nice.

** TODO Goal: Configuration results in an Emacs usable at a Notepad++ level
Should paper over main annoyances that new users face.

cua-mode does a lot here.

** TODO Spellcheck this document.

** TODO Should we enable pixel-scroll-mode in the config?

Not for Emacs 28. It's very laggy on my computer. For Emacs 29, there's pixel-scroll-precision-mode, which works much better.

* Meta rules for this document :noexport:
** Emacs Lisp
*** Avoid using quote where possible.
try not to use quote for lists, use =(list)= instead if possible. =(list)=
is hopefully more readable and approachable for people new to Lisp,
which the majority of our audience likely will be.
** Famliarity
*** Use popular notation for keyboard shortcuts.
# TODO: Jeff: I'm unsure about this. We could introduce it at the
# start, then use Emacs notation throughout the presentation.
# I'm not sure which option is better.
Can mention Emacs notation (=C-x=), but should use a popular notation
throughout the presentation (=Ctrl-x=).

* What is Emacs?
** What is Emacs?
Emacs is:

- a text editor
- customizable
  - There are many settings available without writing actual code, and
    small changes require little code.
- infinitely extensible
  - Thousands of plugins/extensions ("packages").
  - Emacs is configured with a full programming language, can easily
    add your own functions.

Emacs has a long history (47 years; 38 years for GNU Emacs), but
nowadays the most widely used version is GNU Emacs.

** Dispelling the CMSC216 myth
If you attend the University of Maryland and take CMSC216, you will use Emacs.

But, it will be running on a (somewhat slow) shared server in a
remote-desktop-like scenario.

Running graphical programs over a network is slow and unresponsive.
Emacs is comfortably fast when it is running on your computer.

Also the version of Emacs installed on those servers is old.

** About this presentation
Emacs is infinitely customizable. We can only cover a very small part
of that infinity, and that part is biased by our experiences.

At the end of the day this presentation is really about how we use
Emacs and how we think you /might/ use Emacs.

** What to expect from this presentation
- Hopefully, with the base config and knowledge from this presentation
  you can comfortably use Emacs at a basic level to edit code and
  other text.
- Learn how to get help from Emacs and external sources.
- Basic knowledge of a few advanced Emacs features.
- Awareness of interesting options to dive deeper, if you wish to do so.

* Basic Emacs usage
** First things first: Keyboard shortcut notation
=Ctrl+Alt+Shift+x=

When talking about keyboard shortcuts, Emacs would write the above as =C-M-S-x=.

- 'C' stands for control/ctrl.
- 'M' stands for "meta". For historical reasons Emacs talks about a
  "meta" key. Nowadays this usually means "Alt".
- 'S' stands for shift.

** First things first: Stopping/quitting
=C-g= key command quits the current action.

- Make a mistake while typing a key command? =C-g= will quit the partially entered command.
- Run a command that takes a while and want to stop it? =C-g=
- Is there a prompt open that you want to close? =C-g=

Note: =C-g= means =Control+g=, which means hold control/ctrl and press
'g'. We will use the shorter form because it is what Emacs uses, to
help you get accustomed to it.

** First things first: Running commands
=M-x= (that's hold Alt+x) lets you execute commands by their name.

Every action in Emacs executes a command, even when you press
simple letter keys. And you can always run that command manually by
using =M-x=.

** Mess around in a buffer
Create a new buffer.
1. =C-x b=
   - This means =Control+x b=, which means:
     1. Hold the Control/Ctrl key and press 'x'.
     2. Release the control key.
     3. Press 'b'.
   - Note: This is different from =C-x C-b=, which means hold control,
     press x then b, then release control.
2. At the bottom of your Emacs window there should be a prompt "Switch
   to buffer", with your cursor at the end so that you can type.
3. Type a name for the buffer, such as "new", then press enter.

You should now be in a blank buffer.

Notepad-level stuff works. Type stuff, backspace, arrow keys,
selecting text and moving with the mouse.

** Hold up - what's a buffer?
- Buffer = A place where text is stored that you can edit.
  - When you open a file it is loaded into a buffer. When you "save a
    file", the contents of the buffer are written to the file.
  - "Everything is a buffer" = most shortcuts and commands work across any buffer with text - the exact details may vary depending on the application.

Learning new shortcuts takes time. The menu bar at the top of the
screen has many common commands, and will also tell you the keyboard
shortcut.

** Opening files
# TODO : Best way to explain this one? New programmers may not have
# worked with file paths yet, and I don't know if Emacs can or should
# open the system file dialog. Maybe could teach using Dired?

So many options!

- You can click on the menu bar to open files. File > Open File...
- If you set Emacs as your default editor, then you can open files in
  Emacs from your operating system's file manager / file explorer.
- Open a file browser in Emacs: =M-x dired=.
  - Click on a file or folder name to open it, and click on =..= to go back 1 directory.
  - You can do other things like copy/move/rename/delete files in Dired too
- If you know the path of the file, type =C-x C-f=. You can hold Control while pressing x and f. Then you can type the path and open it.

** Common shortcuts

- Select text: =C-SPC= (Ctrl+spacebar)
  - Using movement shortcuts will select more text. Press =C-g= to stop
    selecting.
- =C-z=, =C-x=, =C-c=, =C-v= for undo/cut/copy/paste
- =C-S-z= and =C-y= for redo
  - You can also undo an undo: Press =C-z=, then any non-undo key (like =C-g=), then =C-z=
  - Older versions of Emacs did not have an undo key, you have to undo the undo or use an external package. Hooray Emacs 28!
- Ctrl + left/right arrow to move by word
- Right click for context menu
- Save file: =C-x C-s=
- Close file: =C-x k=, =M-x kill-buffer=
- Save as: =C-x C-w=, =M-x write-file=
- Find / search file contents: =C-s=
- Go to start/end of file: =M-<=, =M->=

** Viewing multiple buffers at the same time

1. Split the window: =C-x 2= splits horizontally, =C-x 3= splits vertically
2. Scroll down one window. The view changes in that window only.
3. Use =C-x b= to switch buffers. You can also click on the menubar: Buffers > select buffer, or press Ctrl-left click

** Window shortcuts

- Meta (Alt) plus arrow keys: move between windows
- Meta and Shift plus arrow keys: swap the position of windows
- =C-x 2=, =C-x 3= = Split horizontally and vertically
- =C-x 0= = Delete/close focused window
- =C-x 1= = Delete all other windows except focused window

* Getting help
** Self-documenting
Emacs is /self-documenting/. It can tell you information about itself.
This feature is dynamic; if you rebind a key, or define your own
function/variable, that info will also be shown.

** What does that (variable|function|command|...) do?
Commands starting with =describe-=.

- =describe-command= (bound to =C-h x=. Mneumonic: =x= because =M-x= runs commands.)
- =describe-variable= (bound to =C-h v=)
- =describe-key= (bound to =C-h k=)
- =describe-mode= (bound to =C-h m=)

=C-h ?= will tell you about all the help functions bound under the =C-h= prefix.

You can also press =F1= instead of =C-h=, so =C-h k= becomes =F1 k=.

* Demo

* Demo details :noexport:

** Open remote file with TRAMP
If it fails for whatever reason, open the files locally.

** Run M-x compile
Show errors.

Click on error to jump to location, then show M-g M-n and M-g M-p to go to next/previous error.

** Fix the error(s) and recompile

** Simple refactor
Change the arguments for a function.

Run M-x compile, jump to error. Show callsites need to be changed.

Run M-x occur, then use editable Occur with a macro to update all callsites.

** Git
Use Magit to commit changes.

* (optional) Adventures
** Adventures that await you, if you wish
# TODO : Do we want to mention Doom, Spacemacs, or any other pre-made
# configurations? If so, which subset of them do we want to mention?
#
# Jeff: Personally I have used Doom and found it to be pretty good, but
# now I prefer a smaller custom configuration I can more easily
# understand.
# Skylar: Yes mention Doom/Spacemacs
- TRAMP : Transparent Remote (file) Access, Multiple Protocol
  - Similar to VS Code's Remote SSH plugin.
- evil-mode: Emulates Vim keybindings.
- [[https://orgmode.org/][org-mode]]
  - "keeping notes, authoring documents, computational notebooks,
    literate programming, maintaining to-do lists, planning projects",
    spreadsheets
  - This slideshow and the sample configuration we provide you were
    both created from the same Org document.
- [[https://magit.vc/][Magit]], the magical Git interface
  - A high-quality interface for the Git version control system.

** If you love Emacs so much, why don't you marry it?
Here are just a few examples of things Emacs can do beyond editing text.

- Shells / terminals: =M-x shell=, =eshell=, =term=, =ansi=term=
  - [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Running Shells and Terminal Emulators in Emacs]]
- Email: [[https://www.gnus.org/][GNUS]], [[https://www.djcbsoftware.nl/code/mu/mu4e/index.html][mu4e]], and [[https://www.emacswiki.org/emacs/CategoryMail][more]]
- Instant messaging client for Slack, IRC, Matrix, etc.
- eww, the Emacs web browser
- Music player

* (extra) Plain fun
** Plain fun
- artist-mode lets you draw text-based art.
- =M-x strokes-help= : Control Emacs with mouse gestures.
- =M-x follow-mode= : Enable this and open multiple copies of a buffer
  side-by-side with =C-x 3= to read a buffer across multiple columns.

* (extra) Other resources
** Whet your appetite
- [[https://emacsrocks.com/][Emacs Rocks!]]: Series of short videos demonstrating cool and useful
  things you can do with Emacs.
- [[https://karthinks.com/software/batteries-included-with-emacs/][Batteries included with Emacs]] : Underrated built-in features.
  - [[https://karthinks.com/software/more-batteries-included-with-emacs/][More batteries included with Emacs]]

** Reference
- [[https://www.gnu.org/software/emacs/manual/index.html][GNU Emacs manuals]]
  - Also available inside of Emacs. =M-x info-emacs-manual= or =C-M-h r=
- [[https://www.emacswiki.org/][EmacsWiki]]
- https://www2.lib.uchicago.edu/keith/emacs/
* (reference) Miscellaneous
** Modeline

Aka the status bar. We use the [[https://github.com/seagle0128/doom-modeline][Doom Modeline]] which adds a dash of color and icons to the default.

- Filename: Left/right click on the filename to cycle buffers
- UTF-8: Change line ending style (when working on files across operating systems)
- Major mode: Left click to access major mode commands, right click to access minor mode commands
- Git integration: Click to access VC (version-control) commands, like viewing commit history
- And more goodies we won't cover here

* (reference) Beginning our configuration
** Emacs Lisp code
#+begin_src elisp :tangle no
<<initialize-package-manager>>
#+end_src

- semicolon (=;=) = Comment that continues until the end of the line.
- ='package= = A "symbol". Human-readable constant. Can think of it
  like an enum value.

** Emacs Lisp code
# TODO : This whole "Emacs Lisp code" section may be too long. We can
# certainly breeze through it during the actual presentation and keep
# it in the slides for reference, but it still may be overboard for
# the purpose of this workshop.

#+begin_src elisp :tangle no
<<initialize-package-manager>>
#+end_src

Translated to familiar syntax:

#+begin_src text :tangle no
  import package

  # Initialize package manager
  package.archives = [["gnu", "https://elpa.gnu.org/packages/"],
                      ["nongnu", "https://elpa.nongnu.org/nongnu/"]]
  package.initialize()
  if (not package.archive_contents) {
     package.refresh_contents()
  }
#+end_src

** Emacs Lisp code
In a C-like language:

#+begin_src elisp :tangle no
sqrt(1 + 2 + 3)
#+end_src

In Emacs Lisp:

#+begin_src text :tangle no
(sqrt (+ 1 2 3))
#+end_src

- Move the function name inside the parentheses.
- All operators (like =+=) are called using function syntax, so the
  plus goes at the start (prefix) instead of in the middle (infix).

** Setup the package manager
Emacs has *many* features built-in, but we will want some third-party packages.
Here, "packages" just means additional code for Emacs.

You can generally think of them like plugins/extensions.

#+name:initialize-package-manager
#+begin_src elisp
  ;; Initialize package manager
  (require 'package)
  <<package-archives>>
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Non-tangled :noexport:
:PROPERTIES:
:header-args: :tangle no
:END:

#+name: package-archives
#+begin_src elisp :noweb tangle
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("melpa" . "https://melpa.org/packages/")
          ))
#+end_src

** Package archives
The =package-archives= variable specifies where to download packages from.

- MELPA = Widely used third-party package repository.
- ELPA = Emacs Lisp Package Archive. This is the official Emacs
  package archive.

#+begin_src elisp :tangle no
  <<package-archives>>
#+end_src

** use-package
We will be using =use-package=, a tool for declaratively specifying
package configuration.

#+begin_src elisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  ;; Download and install configured packages if they aren't already installed.
  (setq use-package-always-ensure t)
#+end_src

** Pretty colors
# TODO : Not sure if mentioning color schemes in the actual
# presentation is a good idea. Maybe could only take 10 seconds, then
# people can play with the options while we move on?

# Skylar - just briefly mention this part so people can play with the themes a bit

# TODO : ef-themes seem to conflict with modus themes, at least for
# display-line-numebers mode line numbers column. and some other text
# highlighting aspects.
# Maybe need to run =M-x disable-theme= before changing themes?

# TODO : Test the initial theme loading prompting you if you want to
# trust the theme code. Should we make the base configuration trust
# all the ef-themes by default? Or just mention the minibuffer and
# that people should look there for prompts?

#+begin_src elisp
  (use-package ef-themes)
  ;; A nice dark theme. 'modus-operandi' is the light theme version.
  ;; You can change the theme while Emacs is running with `M-x load-theme`.
  (load-theme 'modus-vivendi)
#+end_src

- Selecting a theme with =M-x consult-theme= will interactively
  preview what the theme will look like.
- You may get a minibuffer prompt asking you to approve a theme.
  Themes can run arbitrary Lisp code, so for security only themes you
  have approved can be loaded.
- The =ef-themes= look nice and colorful. There are many more themes
  out there, you just have to find a package that has one you like.

** Binding keys

You can always run a command with

#+begin_src elisp :tangle no
M-x command name
#+end_src

If you use a command frequently, you can save time by binding a key to it:

- =M-x global-set-key= : you can run this interactively to try new keybindings
- =bind-key= : an ELisp macro that saves your list of custom keybinds.
  View the saved ones with =M-x describe-personal-keybindings=

There are some other interesting quirks for binding symbols and tab characters, read the manual for that.

** Binding keys
Additional, the F5-F9 keys are reserved for users. Packages will typically leave these keys alone for you to bind.

For example, you could bind =F5= to =M-x compile= to more quickly compile/run code.

There are other shortcuts that might not be used, =free-keys= lists free keys for shortcuts

You can even rebind existing shortcuts, this is Emacs after all. Some people rebind all their keys to make Emacs like Vim!

* (reference) Further configuration :noexport:
Configuration that won't show up in the slides, or a temporary place
for configuration that we're not sure how to fit into the slides.

#+begin_src elisp
  ;; Save changes made with Emacs' Customize system to a different file,
  ;; so that there isn't strange code added to your init.el file.
  ;; Then, load this file to load customizations.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Record startup times of packages, useful for debugging
  (setq use-package-compute-statistics t)
  ;; Emacs 28+ includes native compilation. If you get annoyed by the errors, uncomment the below line to log warnings without popping up the *Warnings* buffer.
  ; (native-comp-async-report-warnings-errors 'silent)

  ;; enable keybind support
  ;; you can run `M-x describe-personal-keybindings` to list custom keys'
  (use-package bind-key)

  ;; delight hides entries from the modeline
  ;; useful for reducing clutter
  (use-package delight)

  ;; Here we use a nice dark theme. `'modus-operandi` is the light theme version.
  ;; Some themes load Lisp code such as this one
  ;; Normally we want to read the Lisp code to ensure it is safe, but this theme is built-in, so ignoring this check is fine.
  (load-theme 'modus-vivendi t)
  ;; The built-in modus themes have accessible colors for colorblind folks
  ;; ef-themes is another accessible palette which is installed
  (use-package ef-themes)
  ;; You can change the theme with `M-x load-theme`.
  ;; You can pick from the modus-themes with `M-x modus-themes-select'.
  ;; You can pick from the ef-themes with `M-x ef-themes-select`.
  ;; You can change them interactively with `M-x consult-theme`.

  ;; Default cursor is a block, uncomment this if you want a bar
  ;; (setq cursor-type 'bar)

  (use-package rainbow-delimiters
    ;; rainbow parentheses
    :hook prog-mode)

  (use-package cua-base
    ;; Familiar undo/cut/copy/paste keys
    ;; To press Ctrl-X or Ctrl-C as part of a shortcut:
    ;; - type it quickly (within 0.2 seconds by default)
    ;; - press Ctrl-Shift-X or Ctrl-Shift-C
    :custom
    (cua-keep-region-after-copy t)
    (mouse-drag-and-drop-region t)
    :init
    (cua-mode))

  (use-package gcmh
    ;; the Garbage Collector Magic Hack
    ;; By default Emacs collects a little garbage frequently, which can be slow.
    ;; The hack is to collect a lot of garbage infrequently (when Emacs is idle).
    ;; Disable this if your computer runs out of memory often.
    :delight
    :init (gcmh-mode))

  ;; The default undo limits for emacs are quite low.
  ;; On modern systems you may wish to use much higher limits.
  ;; Otherwise you might not be able to undo very far.
  ;; https://codeberg.org/ideasman42/emacs-undo-fu#undo-limits
  (setq undo-limit 6710886400) ;; 64mb.
  (setq undo-strong-limit 100663296) ;; 96mb.
  (setq undo-outer-limit 1006632960) ;; 960mb.

  ;; Emacs yes-or-no questions require answering 'yes' or 'no' by default
  ;; Once you get the hang of Emacs, you can uncomment this to answer with 'y' or 'n' instead
  ;; (setq use-short-answers t)

  (use-package windmove
    ;; Window movement
    :init
    ;; Press Alt-Arrow to move focus between windows by direction
    (windmove-default-keybindings 'meta)
    ;; Press Alt-Shift-Arrow to swap windows by direction
    (windmove-swap-states-default-keybindings '(shift meta))
    ;; Press C-x Alt-Arrow to delete windows by direction
    (windmove-delete-default-keybindings nil 'meta))

  (use-package which-key
    ;; Show a list of commands and keybindings that can be executed from your current keypresses
    :init
    (which-key-mode))

  (use-package expand-region
    ;; expand/contract selection from words/characters
    :bind (("C-=" . er/expand-region)
           ("C--" . er/contract-region)))

  (use-package orderless
    ;; completion style that matches patterns in any order
    ;; useful when you can't remember what `M-x` command you're looking for
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package vertico
    ;; vertical completion UI
    :init
    (vertico-mode)
    (vertico-mouse-mode))

  (use-package marginalia
    ;; annotate completion buffer
    :init
    (marginalia-mode))

  (use-package consult
    ;; interactive search and navigation commands
    ;; very customizable, here we override some default keys
    ;; you can uncomment them if you like, commands are accessible via `M-x`
    :bind (("C-x b" . consult-buffer)
           ("M-y" . consult-yank-pop)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)))

  ;; icons! You can install fonts with M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :if (display-graphic-p))
  ;; icons for completion buffer
  (use-package all-the-icons-completion
    :after all-the-icons
    :init (all-the-icons-completion-mode))
  ;; icons for dired
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
  ;; icons for corfu popup
  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; default behavior tabs instead of completing
  (setq tab-always-indent 'complete)
  ;; default right-click menu
  (context-menu-mode)
  ;; shift-click to select region
  (bind-key (kbd "S-<down-mouse-1>") 'mouse-set-mark)
  ;; Ctrl+y and Ctrl+Shift+Z for redo
  (bind-key (kbd "C-S-z") 'undo-redo)
  (bind-key (kbd "C-y") 'undo-redo)
  ;; Send files to trash when deleting in Emacs
  (setq delete-by-moving-to-trash t)
  ;; scroll only 1 line at a time
  (setq scroll-conservatively most-positive-fixnum)
  ;; Use C-x C-f to open files and urls at point
  (ffap-bindings)
  ;; remember recent files
  (recentf-mode)

  ;; change backup file locations to ~/.emacs.d/aux/
  (setq lock-file-name-transforms
        '(("\\`/.*/\\([^/]+\\)\\'" "~/.emacs.d/aux/\\1" t)))
  (setq auto-save-file-name-transforms
        '(("\\`/.*/\\([^/]+\\)\\'" "~/.emacs.d/aux/\\1" t)))
  (setq backup-directory-alist
        '((".*" . "~/.emacs.d/aux/")))

  ;; show line and column numbers in modeline
  (column-number-mode)
  (line-number-mode)
  ;; show line numbers in programming modes
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  ;; highlight the current line in programming modes
  (add-hook 'prog-mode-hook #'hl-line-mode)
  ;; wrap visual lines
  ;; opinionated
  ;; (global-visual-line-mode)

  (use-package whole-line-or-region
    ;; opinionated
    ;; use the default emacs clipboard shortcuts to cut/copy whole lines when there is no region
    ;; also affects the comment shortcut - Alt-; comments whole lines when there is no region, like Ctrl-x Ctrl-;
    :delight whole-line-or-region-local-mode
    :init (whole-line-or-region-global-mode))

  ;; save minibuffer history
  (use-package savehist
    :init
    (savehist-mode)
    (add-to-list 'savehist-additional-variables 'corfu-history))

  ;; remember file history
  ;; integrates with consult
  (use-package recentf
    ;; double recentf history size
    :custom
    (recentf-max-menu-items 20)
    (recentf-max-saved-items 40)
    :bind
    ("C-x C-r" . recentf)
    :init
    (recentf-mode))


  (use-package corfu
    ;; Tab completion
    ;; https://elpa.gnu.org/packages/corfu.html#orgea2217e
    ;; TAB-and-Go customizations
    :custom
    (corfu-auto t)
    (corfu-cycle t)           ;; Enable cycling for `corfu-next/previous'
    (corfu-preselect 'prompt) ;; Always preselect the prompt

    ;; Use TAB for cycling, default is `corfu-complete'.
    :bind
    (:map corfu-map
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous))
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . hippie-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

  ;; ;; Enable Corfu completion UI
  ;; ;; See the Corfu README for more configuration tips.
  ;; (use-package corfu
  ;;   :init
  ;;   (global-corfu-mode))

  ;; Add extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Use M-p because it's easier to type
    :bind (("M-p p" . completion-at-point) ;; capf
           ("M-p t" . complete-tag)        ;; etags
           ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("M-p h" . cape-history)
           ("M-p f" . cape-file)
           ("M-p k" . cape-keyword)
           ("M-p s" . cape-symbol)
           ("M-p a" . cape-abbrev)
           ("M-p i" . cape-ispell)
           ("M-p l" . cape-line)
           ("M-p w" . cape-dict)
           ("M-p \\" . cape-tex)
           ("M-p _" . cape-tex)
           ("M-p ^" . cape-tex)
           ("M-p &" . cape-sgml)
           ("M-p r" . cape-rfc1345))

    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )

  (use-package eglot
    ;; Emacs client for the Language Server Protocol
    ;; LSP servers must be installed separately
    ;; Default servers are listed in the 'eglot-server-programs' variable
    ;; This hook attempts to start automatically start eglot for code files
    :hook (prog-mode . eglot-ensure))
  (setq completion-category-overrides '((eglot (styles orderless))))
  ;; (with-eval-after-load 'eglot
  ;; (setq completion-category-defaults nil))
  ;; https://emacs-lsp.github.io/lsp-mode/page/performance/#increase-the-amount-of-data-which-emacs-reads-from-the-process
  (setq read-process-output-max (* 1024 1024)) ;; 1mb


  (use-package tree-sitter)
  ;; incremental parsing library
  ;; Emacs has historically used font-lock, a regular expression syntax highlighter
  ;; tree-sitter features faster, more colorful, and more accurate syntax highlighting.
  ;; Run M-x tree-sitter-langs-install-grammars to install a default set of grammars.
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (use-package tree-sitter-langs)

  (use-package elec-pair
    ;; insert a closing paren when typing an opening paren
    ;; you can select a word and press a paren to surround it with that paren
    :hook (prog-mode . electric-pair-mode))

  (use-package paren
    ;; highlight matching parens
    :hook (prog-mode . show-paren-mode))

  (use-package mixed-pitch
    ;; don't use monospace fonts for reading/writing text
    :delight
    :hook
    (text-mode . mixed-pitch-mode))

  (use-package anzu
    ;; show number of matches in search
    :delight
    :bind
    (("M-%" .  anzu-query-replace)
     ("C-M-%" . anzu-query-replace-regexp))
    :init
    (global-anzu-mode))

  (use-package doom-modeline
    ;; use a fancy modeline from the Doom Emacs distribution
    :init
    (doom-modeline-mode))

  (use-package treemacs)

  (use-package dired-sidebar)
  ;; (define-key dired-mode-map (kbd "<mouse-2>") 'dired-find-alternate-file)

  (use-package dired
    :custom
    (dired-listing-switches "-lah")
    (dired-recursive-copies 'top)
    (dired-recursive-deletes 'top))

  (use-package diredfl
    :config
    (diredfl-global-mode))

  (use-package magit)
#+end_src
* (reference) Glossary
